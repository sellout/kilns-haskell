cabal-version: 3.0

name: kilns
version: 0.1.0.0
synopsis: An experimental programming language based on the kell calculus
description:
author: Greg Pfeil <greg@technomadic.org>
maintainer: Greg Pfeil <greg@technomadic.org>
copyright: 2013–2024 Greg Pfeil
homepage: https://github.com/sellout/kilns-haskell#readme
bug-reports: https://github.com/sellout/kilns-haskell/issues
category: Distributed Computing, Language
build-type: Custom
license: AGPL-3.0-or-later
license-files:
  LICENSE
tested-with:
  GHC == {
--  GHCup   Nixpkgs
    8.6.1,
    8.8.1,  8.8.4,
    8.10.1,
    9.0.1,
    9.2.1,
    9.4.1,  9.4.8,
    9.6.1,
            9.8.1
  }

source-repository head
  type: git
  location: https://github.com/sellout/kilns-haskell

-- This mimics the GHC2021 extension
-- (https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/control.html?highlight=doandifthenelse#extension-GHC2021),
-- but supporting compilers back to GHC 7.10. If the oldest supported compiler
-- is GHC 9.2, then this stanza can be removed and `import: GHC2021` can be
-- replaced by `default-language: GHC2021`.
common GHC2021
  default-language: Haskell2010
  default-extensions:
    BangPatterns
    BinaryLiterals
    ConstraintKinds
    DeriveDataTypeable
    DeriveGeneric
    -- DeriveLift -- uncomment if the oldest supported version is GHC 8.10.1+
    DeriveTraversable
    DerivingStrategies
    DoAndIfThenElse
    EmptyCase
    ExistentialQuantification
    FlexibleContexts
    FlexibleInstances
    GADTSyntax
    GeneralizedNewtypeDeriving
    -- HexFloatLiterals -- uncomment if the oldest supported version is GHC 8.4.1+
    -- ImportQualifiedPost -- uncomment if the oldest supported version is GHC 8.10.1+
    InstanceSigs
    LambdaCase
    MagicHash
    MonadComprehensions
    MonomorphismRestriction
    MultiParamTypeClasses
    NamedFieldPuns
    NamedWildCards
    -- NumericUnderscores -- uncomment if the oldest supported version is GHC 8.6.1+
    PolyKinds
    PostfixOperators
    RankNTypes
    ScopedTypeVariables
    StandaloneDeriving
    -- StandaloneKindSignatures -- uncomment if the oldest supported version is GHC 8.10.1+
    TupleSections
    -- TypeApplications -- uncomment if the oldest supported version is GHC 8.0.1+
    TypeOperators
    UnicodeSyntax
    NoExplicitNamespaces

flag noisy-deprecations
  description:
    Prior to GHC 9.10, the `DEPRECATED` pragma can’t distinguish between terms
    and types. Consenquently, you can get spurious warnings when there’s a name
    collision and the name in the other namespace is deprecated. Or you can
    choose to not get those warnings, at the risk of not being warned when
    there’s a name collision and the namespace you’re referencing is the one
    that’s deprecated.

common defaults
  import: GHC2021
  build-depends:
    base ^>= {4.12.0, 4.13.0, 4.14.0, 4.15.0, 4.16.0, 4.17.0, 4.18.0, 4.19.0},
  ghc-options:
    -Weverything
    -- This one just reports unfixable things, AFAICT.
    -Wno-all-missed-specialisations
    -- Type inference good.
    -Wno-missing-local-signatures
    -- Warns even when `Unsafe` is explicit, not inferred. See
    -- https://gitlab.haskell.org/ghc/ghc/-/issues/16689
    -Wno-unsafe
    -fpackage-trust
    -trust base
  if impl(ghc < 8.8.1)
    ghc-options:
      -- This used to warn even when `Safe` was explicit.
      -Wno-safe
  if impl(ghc >= 8.10.1)
    ghc-options:
      -- If we didn’t allow inferred-safe imports, nothing would be `Safe`.
      -Wno-inferred-safe-imports
      -- We support GHC versions without qualified-post.
      -Wno-prepositive-qualified-module
      -- `-trust` triggers this warning when applied to transitive dependencies.
      -Wno-unused-packages
  if impl(ghc >= 9.2.1)
    ghc-options:
      -- We support GHC versions without kind signatures.
      -Wno-missing-kind-signatures
  if impl(ghc >= 9.8.1)
    ghc-options:
      -- We support GHC versions without kind signatures.
      -Wno-missing-poly-kind-signatures
      -- Inference good.
      -Wno-missing-role-annotations
  default-extensions:
    DefaultSignatures
    ExplicitNamespaces
    FunctionalDependencies
    LiberalTypeSynonyms
    -- replace with `LexicalNegation` if the oldest supported version is GHC 9.0.1+
    NegativeLiterals
    PackageImports
    ParallelListComp
    -- QualifiedDo - uncomment if the oldest supported version is GHC 9.0.1+
    RecursiveDo
    -- RequiredTypeArguments - uncomment if the oldest supported version is GHC 9.10.1+
    -- StrictData - uncomment if the oldest supported version is GHC 8.0.1+
    -- TemplateHaskellQuotes - uncomment if the oldest supported version is GHC 8.0.1+
    TransformListComp
    NoGeneralizedNewtypeDeriving
    NoImplicitPrelude
    NoMonomorphismRestriction
    NoPatternGuards
    -- NoTypeApplications - uncomment if the oldest supported version is GHC 8.0.1+
  if flag(noisy-deprecations)
    cpp-options: -DSELLOUT_NOISY_DEPRECATIONS

custom-setup
  setup-depends:
    -- TODO: Remove `Cabal` dep once haskell/cabal#3751 is fixed.
    Cabal ^>= {3.0.0, 3.2.0, 3.4.0, 3.6.0, 3.8.0, 3.10.0},
    base ^>= {4.12.0, 4.13.0, 4.14.0, 4.15.0, 4.16.0, 4.17.0, 4.18.0, 4.19.0},
    cabal-doctest ^>= {1.0.0},

library
  import: defaults
  build-depends:
    base-unicode-symbols ^>= {0.2.2},
    charset ^>= {0.3.7},
    containers ^>= {0.6.0},
    multiset ^>= {0.3.4},
    -- We use `fold1`, which wasn’t added to base until 4.18 (GHC 9.6).
    semigroupoids ^>= {5.3.1, 6.0.0},
    -- NB: foldable-classes-compat is a transitive dependency … depending on
    --     which version of other dependencies (specifically,
    --     indexed-traversable) we select. However, `-trust` only works for
    --     packages in the dependency graph, so we make it explicit here for the
    --     times that it doesn’t get included transitively.
    foldable1-classes-compat ^>= 0.1,
  hs-source-dirs: src
  ghc-options:
    -trust base-orphans
    -trust charset
    -trust containers
    -trust foldable1-classes-compat
    -trust semigroupoids
    -trust transformers-compat
    -trust unordered-containers
  exposed-modules:
    Language.KellCalculus.Parser
    Language.KellCalculus.AST
    Language.KellCalculus.JKCalculus
    Language.KellCalculus.ReductionSemantics
    Language.KellCalculus.LabeledTransitionSystem
    -- 4 Congruences
    Language.KellCalculus.ContextBisimulation
    Language.KellCalculus.ContextualEquivalence
    -- 5 Instantiating
    Language.KellCalculus.PnpJKCalculus
    Language.KellCalculus.FraKtal
    -- Language Extensions
    -- Language.Kilns.Parser
    -- Language.Kilns.AST
    Text.Derp
    Text.Derp.Unsafe
  other-modules:
    Language.Common.SetLike

test-suite doctests
  import: defaults
  type: exitcode-stdio-1.0
  hs-source-dirs: tests
  main-is: doctests.hs
  build-depends:
    doctest ^>= {0.16.0, 0.18.1, 0.20.1, 0.21.1, 0.22.2},
    kilns,
  -- TODO: The sections below here are necessary because we don’t have control
  --       over the generated `Build_doctests.hs` file. So we have to silence
  --       all of its warnings one way or another.
  ghc-options:
    -Wno-missing-export-lists
    -Wno-missing-import-lists
    -Wno-safe
  if impl(ghc >= 8.8.1)
    ghc-options:
      -- This used to warn even when `Safe` was explicit.
      -Wno-missing-deriving-strategies
  default-extensions:
    -- Since we can’t add `{-# LANGUAGE Safe -#}` to the generated
    -- “Build_doctests.hs”, we set it here, and that means it has to match
    -- doctests.hs, which is `Unsafe`.
    Unsafe

executable kilns
  import: defaults
  build-depends:
    containers ^>= {0.6.0},
    kilns,
  ghc-options:
    -trust containers
  main-is: src/Language/Kilns/Interpreter/Main.hs
